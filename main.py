import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from search_character import search_character_menu, search_character
from aiogram.dispatcher import FSMContext
import random
from main_menu import main_menu

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token="5302190487:AAGgfGCwZ4niNbw0FZyinVIrE2IDdAgo5-E")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)


class CharacterSearchStates(StatesGroup):
    WaitingForCharacterName = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(Command('start'))
async def cmd_start(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('–ü–æ–∏—Å–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π üîç'))
    keyboard.add(types.KeyboardButton('–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç üé≤'))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç"
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –≠–Ω–∏–≥–º–∞! üî∞.",
        reply_markup=keyboard
    )
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ª—é–±–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ–∏—Å–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π'
@dp.message_handler(text='–ü–æ–∏—Å–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π üîç')
async def search_character_handler(message: types.Message, state: FSMContext):
    await search_character_menu(message, state)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º
@dp.message_handler(state=CharacterSearchStates.WaitingForCharacterName, content_types=types.ContentType.TEXT)
async def search_character_handler(message: types.Message, state: FSMContext):
    await search_character(message, state)


async def send_random_fact(message: types.Message):
    with open('facts.txt', 'r', encoding='utf-8') as file:
        facts = file.read().splitlines()
    random_fact = random.choice(facts)
    await message.answer(random_fact)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞
@dp.message_handler(text='–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç üé≤')
async def get_random_fact(message: types.Message):
    await send_random_fact(message)



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    from aiogram import executor

    executor.start_polling(dp, skip_updates=True)
